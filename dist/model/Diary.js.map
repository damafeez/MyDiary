{"version":3,"sources":["../../server/model/Diary.js"],"names":["diaries","Diary","title","body","author","now","Date","getTime","random","Math","floor","id","Number","toString","concat","diary","Promise","resolve","reject","push","Error","e","find","entry","update","index","findIndex","modify","splice","condition","entries","filter"],"mappings":"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","file":"Diary.js","sourcesContent":["const diaries = [];\nexport default class Diary {\n  constructor({ title, body, author }) {\n    const now = new Date().getTime();\n    const random = Math.floor(Math.random() * 1000);\n    this.title = title;\n    this.body = body;\n    this.author = author;\n    this.id = Number(now.toString().concat(random));\n  }\n\n  static save(diary) {\n    return new Promise((resolve, reject) => {\n      try {\n        if (diary instanceof this) {\n          diaries.push(diary);\n          resolve(diary);\n        } else {\n          throw new Error(`${diary} is not a diary`);\n        }\n      } catch (e) {\n        reject(new Error(e));\n      }\n    });\n  }\n\n  static findById(id) {\n    return new Promise((resolve, reject) => {\n      const diary = diaries.find(entry => entry.id === Number(id));\n      if (diary) {\n        resolve(diary);\n      } else {\n        reject(new Error('entry not found'));\n      }\n    });\n  }\n\n  static findByIdAndUpdate(id, update) {\n    return new Promise((resolve, reject) => {\n      const index = diaries.findIndex(entry => entry.id === Number(id));\n      if (index >= 0) {\n        resolve(diaries[index].modify(update));\n      } else {\n        reject(new Error('entry not found'));\n      }\n    });\n  }\n\n  static findByIdAndDelete(id) {\n    return new Promise((resolve, reject) => {\n      const index = diaries.findIndex(entry => entry.id === Number(id));\n      const diary = diaries.find(entry => entry.id === Number(id));\n      if (index >= 0) {\n        diaries.splice(index, 1);\n        resolve(diary);\n      } else {\n        reject(new Error('entry not found'));\n      }\n    });\n  }\n\n  static find(condition = true) {\n    return new Promise((resolve) => {\n      const entries = diaries.filter(entry => condition);\n      resolve(entries);\n    });\n  }\n\n  modify({ title, body }) {\n    this.title = title;\n    this.body = body;\n    return this;\n  }\n}\nexport { diaries };\n"]}